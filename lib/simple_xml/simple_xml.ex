defmodule SimpleXml do
  @moduledoc """
  This is a thin wrapper around the saxy library.  It leverages the DOM generated by saxy's
  SimpleForm parser and defines some basic operations on the DOM via the `XmlNode` module.

  The main benefit of using saxy's SimpleForm parsing is that it gives us a string presentation of
  the XML DOM, without exposing the users of this library with the
  [atom exhaustion vulernability](https://erlef.github.io/security-wg/secure_coding_and_deployment_hardening/xmerl.html)
  of the xmerl library and any parsers based on it.
  """

  alias SimpleXml.XmlNode

  require Logger

  @type xml_attribute :: {String.t(), String.t()}
  @type xml_node :: {String.t(), [xml_attribute()], [tuple()]}
  @type public_key :: {atom(), any()}

  @doc """
  Parses an XML string to return a tuple representing the XML node.

  ## Examples

  ### Well-formed XMLs are successfully parsed

      iex> SimpleXml.parse(~S{<foo attr1="value1" attr2="value2">body</foo>})
      {:ok, {"foo", [{"attr1", "value1"}, {"attr2", "value2"}], ["body"]}}

  ### Malformed XMLs result in an error

      iex> SimpleXml.parse("<foo")
      {:error, %Saxy.ParseError{reason: {:token, :name_start_char}, binary: "<foo", position: 4}}
  """
  @spec parse(String.t()) :: {:ok, xml_node()} | {:error, Saxy.ParseError.t()}
  def parse(data) when is_binary(data),
    do: Saxy.SimpleForm.parse_string(data)

  @doc ~S"""
  Verifies the signature contained within the XML document represented by the given node.  For the
  sake of simplicity of implementation, this function expects the following to be true for the given
  XML document:
    * Signature conforms to the [XMLDSIG-CORE1](https://www.w3.org/TR/xmldsig-core1/) spec
    * Canonicalization method is [XML-ENC-C14N](http://www.w3.org/2001/10/xml-exc-c14n)
    * InclusiveNamespaces PrefixList is supported [https://www.w3.org/TR/xml-exc-c14n/#def-InclusiveNamespaces-PrefixList]
    * Transformation method includes [XMLDSIG-enveloped-signature](http://www.w3.org/2000/09/xmldsig#enveloped-signature)
    * Digest method is [XMLENC-SHA256](http://www.w3.org/2001/04/xmlenc#sha256) or [XMLDSIG-SHA1](http://www.w3.org/2000/09/xmldsig#sha1)
    * Signature method is [XMLDSIG-SHA256](http://www.w3.org/2001/04/xmldsig-more#rsa-sha256) or [XMLDSIG-RSA-SHA1](http://www.w3.org/2000/09/xmldsig#rsa-sha1)

  Arguments:
    * node: The xml_node corresponding to the document or portion of the document to be verified
    * public_key: The key to use for verifying the signature. Value matches the key argument given
        to `:pubic_key.verify/4`.  Please see document [here](https://www.erlang.org/doc/man/public_key.html#verify-4)
        for further details.

  ## Examples

  ### Verifies a valid signature via the given public key

      iex> cert_der = ~S(MIIDqDCCApCgAwIBAgIGAYj8lAYkMA0GCSqGSIb3DQEBCwUAMIGUMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNU2FuIEZyYW5jaXNjbzENMAsGA1UECgwET2t0YTEUMBIGA1UECwwLU1NPUHJvdmlkZXIxFTATBgNVBAMMDGRldi00NTM0OTkwNjEcMBoGCSqGSIb3DQEJARYNaW5mb0Bva3RhLmNvbTAeFw0yMzA2MjcxMTE3NTlaFw0zMzA2MjcxMTE4NTlaMIGUMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNU2FuIEZyYW5jaXNjbzENMAsGA1UECgwET2t0YTEUMBIGA1UECwwLU1NPUHJvdmlkZXIxFTATBgNVBAMMDGRldi00NTM0OTkwNjEcMBoGCSqGSIb3DQEJARYNaW5mb0Bva3RhLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALTE7IRG+oQZBASQ7DY3yeTrwABdI2BgG2FXKSkTPk9enMwtyUyDXCOteOg18+//MA2UTvgSI+n0fiAh7Bi7cxpimnOaj/kcgvpdn+5wpEfSIDKAeEg9VIQf0fz/ks4XkrNxRh8ba6Z/ypOVR2TLozu8v6sjGCiqHSoiPl78KINHx9jMB3QGdTHRxsTzwFPGcUEvO7XvjxxMN9FLZdHkwtA6cZXDbHlAv+o4EbLIRqXFc3vF5rs3Fz+cgqZ3HVGm90TFFcbPbx/eKcvzyHdYt8P5pi364mijt9NKtNV9F9VdPz+Gp/rxlw0i/IWxV0/vBrW10HPd42krsOgHibxBYg8CAwEAATANBgkqhkiG9w0BAQsFAAOCAQEArpYzZEoYcRo3YF7Ny4gdc8ODSlPPKIdLvwhUTGbPdzJU2ifxzE/KeTHGmFpjpakjDmmWsr2j9FGU/9U0SjqPmJHP5gYbjmz+tD3jeaEkIBDZpcYc+MveQaA7uDMILA2OUhHuFu0UJVjGxl2EIpxivC+IJ0RpBS5AERT6V91Fqv2Ylwb5sklhoXGDx9s+l+Ud1MLaewIvnUHdIRtC02bvlhjwt0pnICDtHMikvOiTXjTBJgl7X9Q51Gm636q9pJVjS1T0gR3cNt9JJE/foDdOK8JozRFtF4j14xegXLt7BVBIXuSOK6P1c09mCPQ1VJbcj01S1zfrvZ+RZvrxr/0aXQ==)
      iex> {:ok, cert} = cert_der |> Base.decode64!() |> X509.Certificate.from_der()
      iex> public_key = X509.Certificate.public_key(cert)
      iex> saml_response = ""
      iex> {:ok, saml_body} = saml_response |> Base.decode64()
      iex> {:ok, root} = SimpleXml.parse(saml_body)
      iex> SimpleXml.verify(root, public_key)
      :ok

  ### Verifies a valid signature that relies on InclusiveNamespaces

      iex> cert_der = ~S(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)
      iex> {:ok, cert} = cert_der |> Base.decode64!() |> X509.Certificate.from_der()
      iex> public_key = X509.Certificate.public_key(cert)
      iex> saml_response = ""
      iex> {:ok, saml_body} = saml_response |> Base.decode64()
      iex> {:ok, root} = SimpleXml.parse(saml_body)
      iex> SimpleXml.verify(root, public_key)
      :ok

  ### Verifies a valid signature using namespace without prefix

      iex> cert_der = ~S(MIIC8DCCAdigAwIBAgIQa2UOh8C+AoJLEaDrZJ8FZzANBgkqhkiG9w0BAQsFADA0MTIwMAYDVQQDEylNaWNyb3NvZnQgQXp1cmUgRmVkZXJhdGVkIFNTTyBDZXJ0aWZpY2F0ZTAeFw0yNTA1MDYxNTA2MjVaFw0yODA1MDYxNTA2MjRaMDQxMjAwBgNVBAMTKU1pY3Jvc29mdCBBenVyZSBGZWRlcmF0ZWQgU1NPIENlcnRpZmljYXRlMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAu+Cl4PPu+XQD/ep9TkNro+MhkSVzKB4CVsO2u4tILUcA/Ux54h8ZyrFSL+zLnPv07oMDKpdjXK4dt5ORJdQN9hd3OE2hIqQGxofOkxRMXWoHO1vAL5tA+XsOa+EWIDbApI/QRPKPtZ1hLk+Y/UK0DMl1kSqQ7PSum16eyS4RFxXkTAcTviO83MKfPyTn0acx8MyeZ8tAHk4h3aSX1Q6Vkwf9ITlDdzLIKO25dFI6v34fMlT2p2OZ9NOz/OSGTrAZefVJnLzdVDfwsH4z8+LHzlc4oAKBqCoysLBwDjYoLwRVLt+J0QaKBx4PWzQxTrk82Rj9+6/DU2XiMl4Cx7JSVQIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQBJus97e94dRrQuiav9PSWmWyvMgyvBoYAirNEw38VBz42WnVU0+sSK4u7o7YVS6Ijjadmu3l6P6dD5waP0Swphp+Cp2Ps+Kr46YluHH8q9Q7uG0cWw2syvHYJj2SRU1Y8vqJtRiC+OQtwuiK6+X8k3R96SLEYRG6SGztpU40GVlv4jKNhGTAGZU7/ORMV61ObugLDeYOxyZ5s8+J0+4z4R02SvfiPHnlFkYRE50CeChMm9SF5ABCu8xsrHDvERn/fjT7brwlJ8NNkRg/QrZvtj1MU8YNPIOBY7GxaSEW06b+zDMxG48bxzphn4GjjlQp/Gx6F50mAYFlkuzTmM2GdQ)
      iex> {:ok, cert} = cert_der |> Base.decode64!() |> X509.Certificate.from_der()
      iex> public_key = X509.Certificate.public_key(cert)
      iex> saml_response = "PHNhbWxwOlJlc3BvbnNlIElEPSJfNzkyZTIzM2EtODA5ZS00ZmI1LWI0YjEtZmEzYmU1OGUyMmNjIiBWZXJzaW9uPSIyLjAiIElzc3VlSW5zdGFudD0iMjAyNS0wNS0xMlQwOToxMTo0MS43OThaIiBEZXN0aW5hdGlvbj0iaHR0cHM6Ly9zYW1sdGVzdC50b2RvLmNvbXB1dGVyL3NhbWwvc3AvY29uc3VtZS9kdW1teS1tcyIgSW5SZXNwb25zZVRvPSJzYW1sX2Zsb3dfam1kWWxHczlod214N1BYWl9uTDQyM2d4d1M1ZVJtZnAiIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiPjxJc3N1ZXIgeG1sbnM9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPmh0dHBzOi8vc3RzLndpbmRvd3MubmV0LzhlNGRhZTczLTg1ODYtNDNmMS04ZTliLThlNWEwOTk0OTA1MC88L0lzc3Vlcj48c2FtbHA6U3RhdHVzPjxzYW1scDpTdGF0dXNDb2RlIFZhbHVlPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6c3RhdHVzOlN1Y2Nlc3MiLz48L3NhbWxwOlN0YXR1cz48QXNzZXJ0aW9uIElEPSJfZDJiMGUyOWYtNTdiZC00NTc1LThiMDctODBjNjA5OGUwOTAwIiBJc3N1ZUluc3RhbnQ9IjIwMjUtMDUtMTJUMDk6MTE6NDEuNzk2WiIgVmVyc2lvbj0iMi4wIiB4bWxucz0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI+PElzc3Vlcj5odHRwczovL3N0cy53aW5kb3dzLm5ldC84ZTRkYWU3My04NTg2LTQzZjEtOGU5Yi04ZTVhMDk5NDkwNTAvPC9Jc3N1ZXI+PFNpZ25hdHVyZSB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+PFNpZ25lZEluZm8+PENhbm9uaWNhbGl6YXRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz48U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxkc2lnLW1vcmUjcnNhLXNoYTI1NiIvPjxSZWZlcmVuY2UgVVJJPSIjX2QyYjBlMjlmLTU3YmQtNDU3NS04YjA3LTgwYzYwOThlMDkwMCI+PFRyYW5zZm9ybXM+PFRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8+PFRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjwvVHJhbnNmb3Jtcz48RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjc2hhMjU2Ii8+PERpZ2VzdFZhbHVlPkNJV1hyaEpoK2h1RlpPN2dwSHNqNFI5VFFiMTFBejZUZ2xBWEVrTms4R009PC9EaWdlc3RWYWx1ZT48L1JlZmVyZW5jZT48L1NpZ25lZEluZm8+PFNpZ25hdHVyZVZhbHVlPmx0TmNVc00rYXpLbTJTTmFpN0ZPc3BxRGhzK3g4anYzQUNJTFlpNUZQWC9BYTkwRnpJcG44ODVvaW9xanVRVXBRUHRyVDdKcXpLRklXVEJscWhSL3BnZkdBZlJheDE3RVR0ei9MY051bFpPU0RRd1BFZGZKMVV1NlZCSGIyLzg3ZnpxZXJNN0p4Nm9jQXlsRGcyZVpXQTc3dHJXcEZyQlA5RlpuS2s0UEZjSDhPQnZZWUxnWk9YMlc5YW9oUFpDaElhYkpyT1NPUVJrNlg1YlhZdUNHbVYrTW80ZEVYZ0xyYVNndlFtb0VBWnF1elgvTVRHbE5GbUpSVk9UOEFoNHJlaW52WTRKNTEyMVpYMzdCTEZKcDNtYkFVNU1SSXp0eFZ3ZDlYc3FITGFxWGpZVHRjSXlTWHJaNDBQNVh3dFdSYjBkN3paTWJnOU1YaWt3MW5xWDVzdz09PC9TaWduYXR1cmVWYWx1ZT48S2V5SW5mbz48WDUwOURhdGE+PFg1MDlDZXJ0aWZpY2F0ZT5NSUlDOERDQ0FkaWdBd0lCQWdJUWEyVU9oOEMrQW9KTEVhRHJaSjhGWnpBTkJna3Foa2lHOXcwQkFRc0ZBREEwTVRJd01BWURWUVFERXlsTmFXTnliM052Wm5RZ1FYcDFjbVVnUm1Wa1pYSmhkR1ZrSUZOVFR5QkRaWEowYVdacFkyRjBaVEFlRncweU5UQTFNRFl4TlRBMk1qVmFGdzB5T0RBMU1EWXhOVEEyTWpSYU1EUXhNakF3QmdOVkJBTVRLVTFwWTNKdmMyOW1kQ0JCZW5WeVpTQkdaV1JsY21GMFpXUWdVMU5QSUVObGNuUnBabWxqWVhSbE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBdStDbDRQUHUrWFFEL2VwOVRrTnJvK01oa1NWektCNENWc08ydTR0SUxVY0EvVXg1NGg4WnlyRlNMK3pMblB2MDdvTURLcGRqWEs0ZHQ1T1JKZFFOOWhkM09FMmhJcVFHeG9mT2t4Uk1YV29ITzF2QUw1dEErWHNPYStFV0lEYkFwSS9RUlBLUHRaMWhMaytZL1VLMERNbDFrU3FRN1BTdW0xNmV5UzRSRnhYa1RBY1R2aU84M01LZlB5VG4wYWN4OE15ZVo4dEFIazRoM2FTWDFRNlZrd2Y5SVRsRGR6TElLTzI1ZEZJNnYzNGZNbFQycDJPWjlOT3ovT1NHVHJBWmVmVkpuTHpkVkRmd3NINHo4K0xIemxjNG9BS0JxQ295c0xCd0RqWW9Md1JWTHQrSjBRYUtCeDRQV3pReFRyazgyUmo5KzYvRFUyWGlNbDRDeDdKU1ZRSURBUUFCTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFCSnVzOTdlOTRkUnJRdWlhdjlQU1dtV3l2TWd5dkJvWUFpck5FdzM4VkJ6NDJXblZVMCtzU0s0dTdvN1lWUzZJamphZG11M2w2UDZkRDV3YVAwU3dwaHArQ3AyUHMrS3I0NllsdUhIOHE5UTd1RzBjV3cyc3l2SFlKajJTUlUxWTh2cUp0UmlDK09RdHd1aUs2K1g4azNSOTZTTEVZUkc2U0d6dHBVNDBHVmx2NGpLTmhHVEFHWlU3L09STVY2MU9idWdMRGVZT3h5WjVzOCtKMCs0ejRSMDJTdmZpUEhubEZrWVJFNTBDZUNoTW05U0Y1QUJDdTh4c3JIRHZFUm4vZmpUN2Jyd2xKOE5Oa1JnL1FyWnZ0ajFNVThZTlBJT0JZN0d4YVNFVzA2Yit6RE14RzQ4Ynh6cGhuNEdqamxRcC9HeDZGNTBtQVlGbGt1elRtTTJHZFE8L1g1MDlDZXJ0aWZpY2F0ZT48L1g1MDlEYXRhPjwvS2V5SW5mbz48L1NpZ25hdHVyZT48U3ViamVjdD48TmFtZUlEIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6MS4xOm5hbWVpZC1mb3JtYXQ6ZW1haWxBZGRyZXNzIj5hZHJpYW4uZ3J1bnRrb3dza2lfZ21haWwuY29tI0VYVCNAYWRyaWFuZ3J1bnRrb3dza2lnbWFpbC5vbm1pY3Jvc29mdC5jb208L05hbWVJRD48U3ViamVjdENvbmZpcm1hdGlvbiBNZXRob2Q9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpjbTpiZWFyZXIiPjxTdWJqZWN0Q29uZmlybWF0aW9uRGF0YSBJblJlc3BvbnNlVG89InNhbWxfZmxvd19qbWRZbEdzOWh3bXg3UFhaX25MNDIzZ3h3UzVlUm1mcCIgTm90T25PckFmdGVyPSIyMDI1LTA1LTEyVDEwOjExOjQxLjQ5MloiIFJlY2lwaWVudD0iaHR0cHM6Ly9zYW1sdGVzdC50b2RvLmNvbXB1dGVyL3NhbWwvc3AvY29uc3VtZS9kdW1teS1tcyIvPjwvU3ViamVjdENvbmZpcm1hdGlvbj48L1N1YmplY3Q+PENvbmRpdGlvbnMgTm90QmVmb3JlPSIyMDI1LTA1LTEyVDA5OjA2OjQxLjQ5MloiIE5vdE9uT3JBZnRlcj0iMjAyNS0wNS0xMlQxMDoxMTo0MS40OTJaIj48QXVkaWVuY2VSZXN0cmljdGlvbj48QXVkaWVuY2U+aHR0cHM6Ly9zYW1sdGVzdC50b2RvLmNvbXB1dGVyPC9BdWRpZW5jZT48L0F1ZGllbmNlUmVzdHJpY3Rpb24+PC9Db25kaXRpb25zPjxBdHRyaWJ1dGVTdGF0ZW1lbnQ+PEF0dHJpYnV0ZSBOYW1lPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL2lkZW50aXR5L2NsYWltcy90ZW5hbnRpZCI+PEF0dHJpYnV0ZVZhbHVlPjhlNGRhZTczLTg1ODYtNDNmMS04ZTliLThlNWEwOTk0OTA1MDwvQXR0cmlidXRlVmFsdWU+PC9BdHRyaWJ1dGU+PEF0dHJpYnV0ZSBOYW1lPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL2lkZW50aXR5L2NsYWltcy9vYmplY3RpZGVudGlmaWVyIj48QXR0cmlidXRlVmFsdWU+MmJjZGM0YTktZTIwZC00Mzc1LTkyYTAtMTU0OGU1MjQxNjUxPC9BdHRyaWJ1dGVWYWx1ZT48L0F0dHJpYnV0ZT48QXR0cmlidXRlIE5hbWU9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vaWRlbnRpdHkvY2xhaW1zL2Rpc3BsYXluYW1lIj48QXR0cmlidXRlVmFsdWU+QWRyaWFuIEdydW50a293c2tpPC9BdHRyaWJ1dGVWYWx1ZT48L0F0dHJpYnV0ZT48QXR0cmlidXRlIE5hbWU9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vaWRlbnRpdHkvY2xhaW1zL2lkZW50aXR5cHJvdmlkZXIiPjxBdHRyaWJ1dGVWYWx1ZT5saXZlLmNvbTwvQXR0cmlidXRlVmFsdWU+PC9BdHRyaWJ1dGU+PEF0dHJpYnV0ZSBOYW1lPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL2NsYWltcy9hdXRobm1ldGhvZHNyZWZlcmVuY2VzIj48QXR0cmlidXRlVmFsdWU+aHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS93cy8yMDA4LzA2L2lkZW50aXR5L2F1dGhlbnRpY2F0aW9ubWV0aG9kL3Bhc3N3b3JkPC9BdHRyaWJ1dGVWYWx1ZT48QXR0cmlidXRlVmFsdWU+aHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9jbGFpbXMvbXVsdGlwbGVhdXRobjwvQXR0cmlidXRlVmFsdWU+PEF0dHJpYnV0ZVZhbHVlPmh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwOC8wNi9pZGVudGl0eS9hdXRoZW50aWNhdGlvbm1ldGhvZC91bnNwZWNpZmllZDwvQXR0cmlidXRlVmFsdWU+PC9BdHRyaWJ1dGU+PEF0dHJpYnV0ZSBOYW1lPSJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9naXZlbm5hbWUiPjxBdHRyaWJ1dGVWYWx1ZT5BZHJpYW48L0F0dHJpYnV0ZVZhbHVlPjwvQXR0cmlidXRlPjxBdHRyaWJ1dGUgTmFtZT0iaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvd3MvMjAwNS8wNS9pZGVudGl0eS9jbGFpbXMvc3VybmFtZSI+PEF0dHJpYnV0ZVZhbHVlPkdydW50a293c2tpPC9BdHRyaWJ1dGVWYWx1ZT48L0F0dHJpYnV0ZT48QXR0cmlidXRlIE5hbWU9Imh0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3dzLzIwMDUvMDUvaWRlbnRpdHkvY2xhaW1zL2VtYWlsYWRkcmVzcyI+PEF0dHJpYnV0ZVZhbHVlPmFkcmlhbi5ncnVudGtvd3NraUBnbWFpbC5jb208L0F0dHJpYnV0ZVZhbHVlPjwvQXR0cmlidXRlPjxBdHRyaWJ1dGUgTmFtZT0iaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvd3MvMjAwNS8wNS9pZGVudGl0eS9jbGFpbXMvbmFtZSI+PEF0dHJpYnV0ZVZhbHVlPmFkcmlhbi5ncnVudGtvd3NraV9nbWFpbC5jb20jRVhUI0BhZHJpYW5ncnVudGtvd3NraWdtYWlsLm9ubWljcm9zb2Z0LmNvbTwvQXR0cmlidXRlVmFsdWU+PC9BdHRyaWJ1dGU+PC9BdHRyaWJ1dGVTdGF0ZW1lbnQ+PEF1dGhuU3RhdGVtZW50IEF1dGhuSW5zdGFudD0iMjAyNS0wNS0wNlQxNDo1MzoyNS4yNzhaIiBTZXNzaW9uSW5kZXg9Il9kMmIwZTI5Zi01N2JkLTQ1NzUtOGIwNy04MGM2MDk4ZTA5MDAiPjxBdXRobkNvbnRleHQ+PEF1dGhuQ29udGV4dENsYXNzUmVmPnVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphYzpjbGFzc2VzOlBhc3N3b3JkPC9BdXRobkNvbnRleHRDbGFzc1JlZj48L0F1dGhuQ29udGV4dD48L0F1dGhuU3RhdGVtZW50PjwvQXNzZXJ0aW9uPjwvc2FtbHA6UmVzcG9uc2U+"
      iex> {:ok, saml_body} = saml_response |> Base.decode64()
      iex> {:ok, root} = SimpleXml.parse(saml_body)
      iex> {:ok, assertion_node} = SimpleXml.XmlNode.first_child(root, ~r/.*:?Assertion$/)
      iex> SimpleXml.verify(assertion_node, public_key)
      :ok

  ### Verifies a valid signature using SHA1

      iex> cert_der = "MIID7jCCAtagAwIBAgIUU9luQT62oTqmaS31pJ1NpqYcYhEwDQYJKoZIhvcNAQEFBQAwSzEWMBQGA1UECgwNVE9ETyBDb21wdXRlcjEVMBMGA1UECwwMT25lTG9naW4gSWRQMRowGAYDVQQDDBFPbmVMb2dpbiBBY2NvdW50IDAeFw0yNTA1MDkxMzU5MDlaFw0zMDA1MDkxMzU5MDlaMEsxFjAUBgNVBAoMDVRPRE8gQ29tcHV0ZXIxFTATBgNVBAsMDE9uZUxvZ2luIElkUDEaMBgGA1UEAwwRT25lTG9naW4gQWNjb3VudCAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCpyWPlOaJihK1yDUGsaIRvQd4jmH2+0KhUWMfS63A26R4aJRyz+8SGYI82R0nsfVPlMBGfeWkK6xY8dIOvx1H2XXgJY9O51+w3TO2cV1jm13P3Ne23euPXm0up63GzjjERY6DC2Mzme7TByBzIHdVApjcMH7yCkivMr/mqFm/hEch8Rm50FhEMaT3EaQ4OKufJfaGOfG5CdXOWHxTbrgzLuZMS4Yovyi2kIS+/mqz0MJR1btACQM6bNBsyZN0vNNu8Kujy4dPBC0midZ/Dw8/ME24Us6Qc53yamvfBDBniHHw3G6ZLwaPKe/808nJGo4RkBC33jJefqlMDdmzclmZ1AgMBAAGjgckwgcYwDAYDVR0TAQH/BAIwADAdBgNVHQ4EFgQUm9P74HmYDHUjGNHXZO/WWJXdyJQwgYYGA1UdIwR/MH2AFJvT++B5mAx1IxjR12Tv1liV3ciUoU+kTTBLMRYwFAYDVQQKDA1UT0RPIENvbXB1dGVyMRUwEwYDVQQLDAxPbmVMb2dpbiBJZFAxGjAYBgNVBAMMEU9uZUxvZ2luIEFjY291bnQgghRT2W5BPrahOqZpLfWknU2mphxiETAOBgNVHQ8BAf8EBAMCB4AwDQYJKoZIhvcNAQEFBQADggEBAJPWxSTvPdpIlLhsETd54hdBZCWsNlJN+wbPlOevbd59WY9XjAeDl8M8RpTIpv7P/ayRVMBB8XybOIL8LhnViOsO2tSpxqc701Blf2NTVTb/HTJTIDCZ7/82qVZHf+34TsCFqdqhdnvtNUMSAMf7bnJ0THm3bcA6OzZjTBNtQ5Rb/m5p3lFH9Zgu5P/leNnEJajOtqEnIngzzzV4cCvw26wG5T0ZW+dcRZBLApGXIFhcDdqRxdjjmf+QP5VZzuPFeTMO+XolEpfmsBd4/S90h1FSV1n7q2PW43AbailzfnMafVGEr/0aZNhTuzej6Bx0Sj1AYg3rrByaqKfzzoS+vB8="
      iex> {:ok, cert} = cert_der |> Base.decode64!() |> X509.Certificate.from_der()
      iex> public_key = X509.Certificate.public_key(cert)
      iex> saml_response = "PHNhbWxwOlJlc3BvbnNlIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0\r\nYzpTQU1MOjIuMDphc3NlcnRpb24iIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6\r\nbmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiIElEPSJSMDk3MGNkZTllZDRm\r\nY2NlZDVlZmE2MzY1Mjg3YWQ3YzRjNzViYWUyMyIgVmVyc2lvbj0iMi4wIiBJ\r\nc3N1ZUluc3RhbnQ9IjIwMjUtMDUtMTJUMTA6MDg6NDdaIiBEZXN0aW5hdGlv\r\nbj0iaHR0cHM6Ly9zYW1sdGVzdC50b2RvLmNvbXB1dGVyL3NhbWwvc3AvY29u\r\nc3VtZS9kdW1teS1vbmVsb2dpbiIgSW5SZXNwb25zZVRvPSJzYW1sX2Zsb3df\r\nX3kwZFJ0dlBnMHlPOF90eGQyekx2QVlfay1CaGNvTVMiPjxzYW1sOklzc3Vl\r\ncj5odHRwczovL2FwcC5vbmVsb2dpbi5jb20vc2FtbC9tZXRhZGF0YS8xODM5\r\nOTNkOC1hMDdiLTQ2NWMtOWM3YS05ZDAwODk4YzQ2MDg8L3NhbWw6SXNzdWVy\r\nPjxzYW1scDpTdGF0dXM+PHNhbWxwOlN0YXR1c0NvZGUgVmFsdWU9InVybjpv\r\nYXNpczpuYW1lczp0YzpTQU1MOjIuMDpzdGF0dXM6U3VjY2VzcyIvPjwvc2Ft\r\nbHA6U3RhdHVzPjxzYW1sOkFzc2VydGlvbiB4bWxuczpzYW1sPSJ1cm46b2Fz\r\naXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIiB4bWxuczp4cz0iaHR0\r\ncDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0\r\ncDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIFZlcnNp\r\nb249IjIuMCIgSUQ9InBmeGJlMjA1OTE4LTE3ZTMtYjQ2NS1jYjk5LTM4MjIy\r\nYTNiOTZkYiIgSXNzdWVJbnN0YW50PSIyMDI1LTA1LTEyVDEwOjA4OjQ3WiI+\r\nPHNhbWw6SXNzdWVyPmh0dHBzOi8vYXBwLm9uZWxvZ2luLmNvbS9zYW1sL21l\r\ndGFkYXRhLzE4Mzk5M2Q4LWEwN2ItNDY1Yy05YzdhLTlkMDA4OThjNDYwODwv\r\nc2FtbDpJc3N1ZXI+PGRzOlNpZ25hdHVyZSB4bWxuczpkcz0iaHR0cDovL3d3\r\ndy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+PGRzOlNpZ25lZEluZm8+PGRz\r\nOkNhbm9uaWNhbGl6YXRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3\r\nLnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz48ZHM6U2lnbmF0dXJl\r\nTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94\r\nbWxkc2lnI3JzYS1zaGExIi8+PGRzOlJlZmVyZW5jZSBVUkk9IiNwZnhiZTIw\r\nNTkxOC0xN2UzLWI0NjUtY2I5OS0zODIyMmEzYjk2ZGIiPjxkczpUcmFuc2Zv\r\ncm1zPjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9y\r\nZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25hdHVyZSIvPjxkczpU\r\ncmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEw\r\nL3htbC1leGMtYzE0biMiLz48L2RzOlRyYW5zZm9ybXM+PGRzOkRpZ2VzdE1l\r\ndGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1s\r\nZHNpZyNzaGExIi8+PGRzOkRpZ2VzdFZhbHVlPmtJcHFtUkF5LzZMd1g5L2Ro\r\naU91NkVXWmpmVT08L2RzOkRpZ2VzdFZhbHVlPjwvZHM6UmVmZXJlbmNlPjwv\r\nZHM6U2lnbmVkSW5mbz48ZHM6U2lnbmF0dXJlVmFsdWU+YjNXRkdISHZybnZD\r\neVJ6ZE9xNFVzNGppcHFQL2lUVCtwakNQRUJuOWZydDQzZENTM0tSRm1VV3A2\r\naGJ3cFNpU2tVcEd3V05SNW92aDhXSElCVlV0WEVoSks3eXlOanNzUWU1ZGJt\r\ncnI3VUx3VW5YMElXa245ams3eGRYVDV2K1ArZGkxQ3ZTNmFyRHY2ZGloTm9o\r\nVWwzUUlIcDRYc0d0VGVaWE9BS3dCclppamZZais2WWw2MEZOVjFRWkxra2lG\r\nVEpJOXFyajU4dnJaU28vWlIwazNjeHkvNEs2bnROaVB6VmhmWjVtZXU0QkZy\r\nLzhEbGx5UE1XWmVIbFFZYVZMenFTSE1tL1dtcGtESnE1YnBFSVB3cUhaWnc4\r\naTFYeWlUU1J2TWsyYXR6NkFSSlVQdlpmcjdIY1hQQ25iS1B3MHhMMEh6TzlR\r\nNlN6a3N5SUNqRjg3QXd3PT08L2RzOlNpZ25hdHVyZVZhbHVlPjxkczpLZXlJ\r\nbmZvPjxkczpYNTA5RGF0YT48ZHM6WDUwOUNlcnRpZmljYXRlPk1JSUQ3akND\r\nQXRhZ0F3SUJBZ0lVVTlsdVFUNjJvVHFtYVMzMXBKMU5wcVljWWhFd0RRWUpL\r\nb1pJaHZjTkFRRUZCUUF3U3pFV01CUUdBMVVFQ2d3TlZFOUVUeUJEYjIxd2RY\r\nUmxjakVWTUJNR0ExVUVDd3dNVDI1bFRHOW5hVzRnU1dSUU1Sb3dHQVlEVlFR\r\nRERCRlBibVZNYjJkcGJpQkJZMk52ZFc1MElEQWVGdzB5TlRBMU1Ea3hNelU1\r\nTURsYUZ3MHpNREExTURreE16VTVNRGxhTUVzeEZqQVVCZ05WQkFvTURWUlBS\r\nRThnUTI5dGNIVjBaWEl4RlRBVEJnTlZCQXNNREU5dVpVeHZaMmx1SUVsa1VE\r\nRWFNQmdHQTFVRUF3d1JUMjVsVEc5bmFXNGdRV05qYjNWdWRDQXdnZ0VpTUEw\r\nR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDcHlXUGxPYUpp\r\naEsxeURVR3NhSVJ2UWQ0am1IMiswS2hVV01mUzYzQTI2UjRhSlJ5eis4U0dZ\r\nSTgyUjBuc2ZWUGxNQkdmZVdrSzZ4WThkSU92eDFIMlhYZ0pZOU81MSt3M1RP\r\nMmNWMWptMTNQM05lMjNldVBYbTB1cDYzR3pqakVSWTZEQzJNem1lN1RCeUJ6\r\nSUhkVkFwamNNSDd5Q2tpdk1yL21xRm0vaEVjaDhSbTUwRmhFTWFUM0VhUTRP\r\nS3VmSmZhR09mRzVDZFhPV0h4VGJyZ3pMdVpNUzRZb3Z5aTJrSVMrL21xejBN\r\nSlIxYnRBQ1FNNmJOQnN5Wk4wdk5OdThLdWp5NGRQQkMwbWlkWi9EdzgvTUUy\r\nNFVzNlFjNTN5YW12ZkJEQm5pSEh3M0c2Wkx3YVBLZS84MDhuSkdvNFJrQkMz\r\nM2pKZWZxbE1EZG16Y2xtWjFBZ01CQUFHamdja3dnY1l3REFZRFZSMFRBUUgv\r\nQkFJd0FEQWRCZ05WSFE0RUZnUVVtOVA3NEhtWURIVWpHTkhYWk8vV1dKWGR5\r\nSlF3Z1lZR0ExVWRJd1IvTUgyQUZKdlQrK0I1bUF4MUl4alIxMlR2MWxpVjNj\r\naVVvVStrVFRCTE1SWXdGQVlEVlFRS0RBMVVUMFJQSUVOdmJYQjFkR1Z5TVJV\r\nd0V3WURWUVFMREF4UGJtVk1iMmRwYmlCSlpGQXhHakFZQmdOVkJBTU1FVTl1\r\nWlV4dloybHVJRUZqWTI5MWJuUWdnaFJUMlc1QlByYWhPcVpwTGZXa25VMm1w\r\naHhpRVRBT0JnTlZIUThCQWY4RUJBTUNCNEF3RFFZSktvWklodmNOQVFFRkJR\r\nQURnZ0VCQUpQV3hTVHZQZHBJbExoc0VUZDU0aGRCWkNXc05sSk4rd2JQbE9l\r\ndmJkNTlXWTlYakFlRGw4TThScFRJcHY3UC9heVJWTUJCOFh5Yk9JTDhMaG5W\r\naU9zTzJ0U3B4cWM3MDFCbGYyTlRWVGIvSFRKVElEQ1o3LzgycVZaSGYrMzRU\r\nc0NGcWRxaGRudnROVU1TQU1mN2JuSjBUSG0zYmNBNk96WmpUQk50UTVSYi9t\r\nNXAzbEZIOVpndTVQL2xlTm5FSmFqT3RxRW5Jbmd6enpWNGNDdncyNndHNVQw\r\nWlcrZGNSWkJMQXBHWElGaGNEZHFSeGRqam1mK1FQNVZaenVQRmVUTU8rWG9s\r\nRXBmbXNCZDQvUzkwaDFGU1YxbjdxMlBXNDNBYmFpbHpmbk1hZlZHRXIvMGFa\r\nTmhUdXplajZCeDBTajFBWWczcnJCeWFxS2Z6em9TK3ZCOD08L2RzOlg1MDlD\r\nZXJ0aWZpY2F0ZT48L2RzOlg1MDlEYXRhPjwvZHM6S2V5SW5mbz48L2RzOlNp\r\nZ25hdHVyZT48c2FtbDpTdWJqZWN0PjxzYW1sOk5hbWVJRCBGb3JtYXQ9InVy\r\nbjpvYXNpczpuYW1lczp0YzpTQU1MOjEuMTpuYW1laWQtZm9ybWF0OmVtYWls\r\nQWRkcmVzcyI+YWRyaWFuK29uZWxvZ2luQHRvZG8uY29tcHV0ZXI8L3NhbWw6\r\nTmFtZUlEPjxzYW1sOlN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46\r\nb2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIj48c2FtbDpTdWJq\r\nZWN0Q29uZmlybWF0aW9uRGF0YSBOb3RPbk9yQWZ0ZXI9IjIwMjUtMDUtMTJU\r\nMTA6MTE6NDdaIiBSZWNpcGllbnQ9Imh0dHBzOi8vc2FtbHRlc3QudG9kby5j\r\nb21wdXRlci9zYW1sL3NwL2NvbnN1bWUvZHVtbXktb25lbG9naW4iIEluUmVz\r\ncG9uc2VUbz0ic2FtbF9mbG93X195MGRSdHZQZzB5TzhfdHhkMnpMdkFZX2st\r\nQmhjb01TIi8+PC9zYW1sOlN1YmplY3RDb25maXJtYXRpb24+PC9zYW1sOlN1\r\nYmplY3Q+PHNhbWw6Q29uZGl0aW9ucyBOb3RCZWZvcmU9IjIwMjUtMDUtMTJU\r\nMTA6MDU6NDdaIiBOb3RPbk9yQWZ0ZXI9IjIwMjUtMDUtMTJUMTA6MTE6NDda\r\nIj48c2FtbDpBdWRpZW5jZVJlc3RyaWN0aW9uPjxzYW1sOkF1ZGllbmNlPmh0\r\ndHBzOi8vc2FtbHRlc3QudG9kby5jb21wdXRlcjwvc2FtbDpBdWRpZW5jZT48\r\nL3NhbWw6QXVkaWVuY2VSZXN0cmljdGlvbj48L3NhbWw6Q29uZGl0aW9ucz48\r\nc2FtbDpBdXRoblN0YXRlbWVudCBBdXRobkluc3RhbnQ9IjIwMjUtMDUtMTJU\r\nMTA6MDg6NDZaIiBTZXNzaW9uTm90T25PckFmdGVyPSIyMDI1LTA1LTEzVDEw\r\nOjA4OjQ3WiIgU2Vzc2lvbkluZGV4PSJfZDlkMTllODQtM2NkMy00ODQ4LWFj\r\nYTAtOWM4OGY3ZTE5NTFjIj48c2FtbDpBdXRobkNvbnRleHQ+PHNhbWw6QXV0\r\naG5Db250ZXh0Q2xhc3NSZWY+dXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4w\r\nOmFjOmNsYXNzZXM6UGFzc3dvcmRQcm90ZWN0ZWRUcmFuc3BvcnQ8L3NhbWw6\r\nQXV0aG5Db250ZXh0Q2xhc3NSZWY+PC9zYW1sOkF1dGhuQ29udGV4dD48L3Nh\r\nbWw6QXV0aG5TdGF0ZW1lbnQ+PHNhbWw6QXR0cmlidXRlU3RhdGVtZW50Pjxz\r\nYW1sOkF0dHJpYnV0ZSBOYW1lRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6\r\nU0FNTDoyLjA6YXR0cm5hbWUtZm9ybWF0OmJhc2ljIiBOYW1lPSJsYXN0X25h\r\nbWUiPjxzYW1sOkF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzaT0iaHR0cDovL3d3\r\ndy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTp0eXBlPSJ4\r\nczpzdHJpbmciPkdydW50a293c2tpPC9zYW1sOkF0dHJpYnV0ZVZhbHVlPjwv\r\nc2FtbDpBdHRyaWJ1dGU+PHNhbWw6QXR0cmlidXRlIE5hbWVGb3JtYXQ9InVy\r\nbjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphdHRybmFtZS1mb3JtYXQ6YmFz\r\naWMiIE5hbWU9ImZpcnN0X25hbWUiPjxzYW1sOkF0dHJpYnV0ZVZhbHVlIHht\r\nbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5z\r\ndGFuY2UiIHhzaTp0eXBlPSJ4czpzdHJpbmciPkFkcmlhbjwvc2FtbDpBdHRy\r\naWJ1dGVWYWx1ZT48L3NhbWw6QXR0cmlidXRlPjxzYW1sOkF0dHJpYnV0ZSBO\r\nYW1lRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXR0cm5h\r\nbWUtZm9ybWF0OmJhc2ljIiBOYW1lPSJlbWFpbCI+PHNhbWw6QXR0cmlidXRl\r\nVmFsdWUgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNj\r\naGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI+YWRyaWFuK29u\r\nZWxvZ2luQHRvZG8uY29tcHV0ZXI8L3NhbWw6QXR0cmlidXRlVmFsdWU+PC9z\r\nYW1sOkF0dHJpYnV0ZT48L3NhbWw6QXR0cmlidXRlU3RhdGVtZW50Pjwvc2Ft\r\nbDpBc3NlcnRpb24+PC9zYW1scDpSZXNwb25zZT4KCg==\r\n"
      iex> {:ok, saml_body} = saml_response |> Base.decode64(ignore: :whitespace)
      iex> {:ok, root} = SimpleXml.parse(saml_body)
      iex> {:ok, assertion_node} = SimpleXml.XmlNode.first_child(root, ~r/.*:?Assertion$/)
      iex> SimpleXml.verify(assertion_node, public_key)
      :ok

  ### Verification fails if the digest doesn't match the expected value

      iex> cert_der = ~S(MIIDqDCCApCgAwIBAgIGAYj8lAYkMA0GCSqGSIb3DQEBCwUAMIGUMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNU2FuIEZyYW5jaXNjbzENMAsGA1UECgwET2t0YTEUMBIGA1UECwwLU1NPUHJvdmlkZXIxFTATBgNVBAMMDGRldi00NTM0OTkwNjEcMBoGCSqGSIb3DQEJARYNaW5mb0Bva3RhLmNvbTAeFw0yMzA2MjcxMTE3NTlaFw0zMzA2MjcxMTE4NTlaMIGUMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNU2FuIEZyYW5jaXNjbzENMAsGA1UECgwET2t0YTEUMBIGA1UECwwLU1NPUHJvdmlkZXIxFTATBgNVBAMMDGRldi00NTM0OTkwNjEcMBoGCSqGSIb3DQEJARYNaW5mb0Bva3RhLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALTE7IRG+oQZBASQ7DY3yeTrwABdI2BgG2FXKSkTPk9enMwtyUyDXCOteOg18+//MA2UTvgSI+n0fiAh7Bi7cxpimnOaj/kcgvpdn+5wpEfSIDKAeEg9VIQf0fz/ks4XkrNxRh8ba6Z/ypOVR2TLozu8v6sjGCiqHSoiPl78KINHx9jMB3QGdTHRxsTzwFPGcUEvO7XvjxxMN9FLZdHkwtA6cZXDbHlAv+o4EbLIRqXFc3vF5rs3Fz+cgqZ3HVGm90TFFcbPbx/eKcvzyHdYt8P5pi364mijt9NKtNV9F9VdPz+Gp/rxlw0i/IWxV0/vBrW10HPd42krsOgHibxBYg8CAwEAATANBgkqhkiG9w0BAQsFAAOCAQEArpYzZEoYcRo3YF7Ny4gdc8ODSlPPKIdLvwhUTGbPdzJU2ifxzE/KeTHGmFpjpakjDmmWsr2j9FGU/9U0SjqPmJHP5gYbjmz+tD3jeaEkIBDZpcYc+MveQaA7uDMILA2OUhHuFu0UJVjGxl2EIpxivC+IJ0RpBS5AERT6V91Fqv2Ylwb5sklhoXGDx9s+l+Ud1MLaewIvnUHdIRtC02bvlhjwt0pnICDtHMikvOiTXjTBJgl7X9Q51Gm636q9pJVjS1T0gR3cNt9JJE/foDdOK8JozRFtF4j14xegXLt7BVBIXuSOK6P1c09mCPQ1VJbcj01S1zfrvZ+RZvrxr/0aXQ==)
      iex> {:ok, cert} = cert_der |> Base.decode64!() |> X509.Certificate.from_der()
      iex> public_key = X509.Certificate.public_key(cert)
      iex> saml_response = ""
      iex> {:ok, saml_body} = saml_response |> Base.decode64()
      iex> {:ok, root} = SimpleXml.parse(saml_body)
      iex> SimpleXml.verify(root, public_key)
      {:error, :digest_verification_failed}

  ### Verification fails if the signature doesn't match the expected value

      iex> cert_der = ~S(MIIDqDCCApCgAwIBAgIGAYj8lAYkMA0GCSqGSIb3DQEBCwUAMIGUMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNU2FuIEZyYW5jaXNjbzENMAsGA1UECgwET2t0YTEUMBIGA1UECwwLU1NPUHJvdmlkZXIxFTATBgNVBAMMDGRldi00NTM0OTkwNjEcMBoGCSqGSIb3DQEJARYNaW5mb0Bva3RhLmNvbTAeFw0yMzA2MjcxMTE3NTlaFw0zMzA2MjcxMTE4NTlaMIGUMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNU2FuIEZyYW5jaXNjbzENMAsGA1UECgwET2t0YTEUMBIGA1UECwwLU1NPUHJvdmlkZXIxFTATBgNVBAMMDGRldi00NTM0OTkwNjEcMBoGCSqGSIb3DQEJARYNaW5mb0Bva3RhLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALTE7IRG+oQZBASQ7DY3yeTrwABdI2BgG2FXKSkTPk9enMwtyUyDXCOteOg18+//MA2UTvgSI+n0fiAh7Bi7cxpimnOaj/kcgvpdn+5wpEfSIDKAeEg9VIQf0fz/ks4XkrNxRh8ba6Z/ypOVR2TLozu8v6sjGCiqHSoiPl78KINHx9jMB3QGdTHRxsTzwFPGcUEvO7XvjxxMN9FLZdHkwtA6cZXDbHlAv+o4EbLIRqXFc3vF5rs3Fz+cgqZ3HVGm90TFFcbPbx/eKcvzyHdYt8P5pi364mijt9NKtNV9F9VdPz+Gp/rxlw0i/IWxV0/vBrW10HPd42krsOgHibxBYg8CAwEAATANBgkqhkiG9w0BAQsFAAOCAQEArpYzZEoYcRo3YF7Ny4gdc8ODSlPPKIdLvwhUTGbPdzJU2ifxzE/KeTHGmFpjpakjDmmWsr2j9FGU/9U0SjqPmJHP5gYbjmz+tD3jeaEkIBDZpcYc+MveQaA7uDMILA2OUhHuFu0UJVjGxl2EIpxivC+IJ0RpBS5AERT6V91Fqv2Ylwb5sklhoXGDx9s+l+Ud1MLaewIvnUHdIRtC02bvlhjwt0pnICDtHMikvOiTXjTBJgl7X9Q51Gm636q9pJVjS1T0gR3cNt9JJE/foDdOK8JozRFtF4j14xegXLt7BVBIXuSOK6P1c09mCPQ1VJbcj01S1zfrvZ+RZvrxr/0aXQ==)
      iex> {:ok, cert} = cert_der |> Base.decode64!() |> X509.Certificate.from_der()
      iex> public_key = X509.Certificate.public_key(cert)
      iex> saml_response = ""
      iex> {:ok, saml_body} = saml_response |> Base.decode64()
      iex> {:ok, root} = SimpleXml.parse(saml_body)
      iex> SimpleXml.verify(root, public_key)
      {:error, :signature_verification_failed}
  """
  @spec verify(xml_node(), public_key()) :: :ok | {:error, any()}
  def verify(node, public_key) when is_tuple(node) do
    with {:ok, node_id} <- XmlNode.attribute(node, "ID"),
         {:ok, signature_node} <- XmlNode.first_child(node, ~r/.*:?Signature$/i),
         {:ok, signed_info_node} <- canonicalized_signed_info(signature_node),
         signed_info_xml <- XmlNode.to_string(signed_info_node),
         {:ok, reference_node} <- XmlNode.first_child(signed_info_node, ~r/.*:?Reference$/i),
         {:ok, sig_method_node} <-
           XmlNode.first_child(signed_info_node, ~r/.*:?SignatureMethod$/i),
         {:ok, sig_algorithm} <- XmlNode.attribute(sig_method_node, "Algorithm"),
         sig_hash = get_hash(sig_algorithm),
         {:ok, reference_uri} <- XmlNode.attribute(reference_node, "URI"),
         {:ok, transforms_node} <- XmlNode.first_child(reference_node, ~r/.*:?Transforms$/i),
         {:ok, transforms} <- XmlNode.children(transforms_node),
         inclusive_namespaces <- get_inclusive_namespaces(transforms),
         :ok <- verify_signature_reference_uri(node_id, reference_uri),
         {:ok, digest_method_node} <- XmlNode.first_child(reference_node, ~r/.*:?DigestMethod$/i),
         {:ok, digest_algorithm} <- XmlNode.attribute(digest_method_node, "Algorithm"),
         digest_hash = get_hash(digest_algorithm),
         {:ok, digest_value_node} <- XmlNode.first_child(reference_node, ~r/.*:?DigestValue$/i),
         {:ok, digest_value} <- XmlNode.text(digest_value_node),
         node <-
           remove_enveloped_signature(node)
           |> XmlNode.canonicalize(inclusive_namespaces: inclusive_namespaces),
         computed_digest <- hash_digest(node, digest_hash),
         :ok <- verify_digest(digest_value, computed_digest),
         {:ok, sig_value_node} <- XmlNode.first_child(signature_node, ~r/.*:?SignatureValue$/i),
         {:ok, signature_value} <- XmlNode.text(sig_value_node),
         {:ok, decoded_signature_value} <- Base.decode64(signature_value, ignore: :whitespace) do
      case :public_key.verify(signed_info_xml, sig_hash, decoded_signature_value, public_key) do
        true -> :ok
        _ -> {:error, :signature_verification_failed}
      end
    else
      {:error, reason} ->
        {:error, reason}

      err ->
        Logger.error("Verification failed: #{inspect(err)}")
        {:error, :verification_failed}
    end
  end

  @spec remove_enveloped_signature(xml_node()) :: xml_node()
  defp remove_enveloped_signature(node) when is_tuple(node),
    do: node |> XmlNode.drop_children(~r/.*:?Signature$/)

  @spec get_hash(String.t()) :: :sha256 | :sha
  defp get_hash("http://www.w3.org/2000/09/xmldsig#rsa-sha1"), do: :sha
  defp get_hash("http://www.w3.org/2000/09/xmldsig#sha1"), do: :sha
  defp get_hash(_), do: :sha256

  @spec hash_digest(xml_node(), :sha256 | :sha) :: String.t()
  defp hash_digest(node, hash_type) when is_tuple(node) and hash_type in [:sha, :sha256] do
    node
    |> XmlNode.to_string()
    |> then(&:crypto.hash(hash_type, &1))
    |> Base.encode64()
  end

  @spec verify_signature_reference_uri(String.t(), String.t()) :: :ok | {:error, any()}
  defp verify_signature_reference_uri(node_id, "#" <> node_id) when is_binary(node_id), do: :ok

  defp verify_signature_reference_uri(_node_id, _reference_uri),
    do: {:error, :invalid_signature_reference_uri}

  @spec verify_digest(String.t(), String.t()) :: :ok | {:error, any()}
  defp verify_digest(digest_value, digest_value) when is_binary(digest_value), do: :ok

  defp verify_digest(_digest_value, _computed_digest_value),
    do: {:error, :digest_verification_failed}

  @spec get_inclusive_namespaces([xml_node()]) :: [String.t()]
  defp get_inclusive_namespaces(transforms) when is_list(transforms) do
    transforms
    |> Enum.reduce([], fn
      transform_node, acc when is_tuple(transform_node) and is_list(acc) ->
        case XmlNode.first_child(transform_node, ~r/.*:?InclusiveNamespaces$/i) do
          {:ok, {_tag, attrs, _children}} ->
            acc ++ prefix_list_from_attrs(attrs)

          _ ->
            acc
        end

      _transform_node, acc ->
        acc
    end)
  end

  @spec prefix_list_from_attrs([xml_attribute()]) :: [String.t()]
  defp prefix_list_from_attrs(attrs) when is_list(attrs) do
    attrs
    |> Enum.reduce([], fn
      {"PrefixList", prefix_list}, acc when is_binary(prefix_list) and is_list(acc) ->
        acc ++ String.split(prefix_list)

      _, acc ->
        acc
    end)
  end

  @spec canonicalized_signed_info(xml_node()) :: {:ok, xml_node()} | {:error, any()}
  defp canonicalized_signed_info(signature_node) when is_tuple(signature_node) do
    with {:ok, namespace_attr} <- XmlNode.namespace_attribute(signature_node),
         {:ok, {tag, attrs, children}} <-
           XmlNode.first_child(signature_node, ~r/.*:?SignedInfo$/i),
         signed_info_node <- {tag, [namespace_attr | attrs], children} |> XmlNode.canonicalize() do
      {:ok, signed_info_node}
    else
      {:error, reason} -> {:error, reason}
    end
  end
end
