defmodule SimpleXml do
  @moduledoc """
  This is a thin wrapper around the saxy library.  It leverages the DOM generated by saxy's
  SimpleForm parser and defines some basic operations on the DOM via the `XmlNode` module.

  The main benefit of using saxy's SimpleForm parsing is that it gives us a string presentation of
  the XML DOM, without exposing the users of this library with the
  [atom exhaustion vulernability](https://erlef.github.io/security-wg/secure_coding_and_deployment_hardening/xmerl.html)
  of the xmerl library and any parsers based on it.
  """

  @type xml_attribute :: {String.t(), String.t()}
  @type xml_node :: {String.t(), [xml_attribute()], [tuple()]}

  @doc """
  Parses an XML string to return a tuple representing the XML node.

  ## Examples

      iex> SimpleXml.parse(~S{<foo attr1="value1" attr2="value2">body</foo>})
      {:ok, {"foo", [{"attr1", "value1"}, {"attr2", "value2"}], ["body"]}}

  """
  @spec parse(String.t()) :: {:ok, xml_node()} | {:error, Saxy.ParseError.t()}
  def parse(data) when is_binary(data),
    do: Saxy.SimpleForm.parse_string(data)
end
