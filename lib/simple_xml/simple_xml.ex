defmodule SimpleXml do
  @moduledoc """
  This is a thin wrapper around the saxy library.  It leverages the DOM generated by saxy's
  SimpleForm parser and defines some basic operations on the DOM via the `XmlNode` module.

  The main benefit of using saxy's SimpleForm parsing is that it gives us a string presentation of
  the XML DOM, without exposing the users of this library with the
  [atom exhaustion vulernability](https://erlef.github.io/security-wg/secure_coding_and_deployment_hardening/xmerl.html)
  of the xmerl library and any parsers based on it.
  """

  alias SimpleXml.XmlNode

  require Logger

  @type xml_attribute :: {String.t(), String.t()}
  @type xml_node :: {String.t(), [xml_attribute()], [tuple()]}
  @type public_key :: {atom(), any()}

  @doc """
  Parses an XML string to return a tuple representing the XML node.

  ## Examples

  ### Well-formed XMLs are successfully parsed

      iex> SimpleXml.parse(~S{<foo attr1="value1" attr2="value2">body</foo>})
      {:ok, {"foo", [{"attr1", "value1"}, {"attr2", "value2"}], ["body"]}}

  ### Malformed XMLs result in an error

      iex> SimpleXml.parse("<foo")
      {:error, %Saxy.ParseError{reason: {:token, :name_start_char}, binary: "<foo", position: 4}}
  """
  @spec parse(String.t()) :: {:ok, xml_node()} | {:error, Saxy.ParseError.t()}
  def parse(data) when is_binary(data),
    do: Saxy.SimpleForm.parse_string(data)

  @doc """
  Verifies the signature contained within the XML document represented by the given node.  For the
  sake of simplicity of implementation, this function expects the following to be true for the given
  XML document:
    * Signature conforms to the [XMLDSIG-CORE1](https://www.w3.org/TR/xmldsig-core1/) spec
    * Canonicalization method is [XML-ENC-C14N](http://www.w3.org/2001/10/xml-exc-c14n)
    * Transformation method includes [XMLDSIG-enveloped-signature](http://www.w3.org/2000/09/xmldsig#enveloped-signature)
    * Digest method is [XMLENC-SHA256](http://www.w3.org/2001/04/xmlenc#sha256)
    * Signature method is [XMLDSIG-SHA256](http://www.w3.org/2001/04/xmldsig-more#rsa-sha256)

  Arguments:
    * node: The xml_node corresponding to the document or portion of the document to be verified
    * public_key: The key to use for verifying the signature. Value matches the key argument given
        to `:pubic_key.verify/4`.  Please see document [here](https://www.erlang.org/doc/man/public_key.html#verify-4)
        for further details.

  ## Examples

  ### Verifies a valid signature via the given public key

      iex> cert_der = ~S(MIIDqDCCApCgAwIBAgIGAYj8lAYkMA0GCSqGSIb3DQEBCwUAMIGUMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNU2FuIEZyYW5jaXNjbzENMAsGA1UECgwET2t0YTEUMBIGA1UECwwLU1NPUHJvdmlkZXIxFTATBgNVBAMMDGRldi00NTM0OTkwNjEcMBoGCSqGSIb3DQEJARYNaW5mb0Bva3RhLmNvbTAeFw0yMzA2MjcxMTE3NTlaFw0zMzA2MjcxMTE4NTlaMIGUMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNU2FuIEZyYW5jaXNjbzENMAsGA1UECgwET2t0YTEUMBIGA1UECwwLU1NPUHJvdmlkZXIxFTATBgNVBAMMDGRldi00NTM0OTkwNjEcMBoGCSqGSIb3DQEJARYNaW5mb0Bva3RhLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALTE7IRG+oQZBASQ7DY3yeTrwABdI2BgG2FXKSkTPk9enMwtyUyDXCOteOg18+//MA2UTvgSI+n0fiAh7Bi7cxpimnOaj/kcgvpdn+5wpEfSIDKAeEg9VIQf0fz/ks4XkrNxRh8ba6Z/ypOVR2TLozu8v6sjGCiqHSoiPl78KINHx9jMB3QGdTHRxsTzwFPGcUEvO7XvjxxMN9FLZdHkwtA6cZXDbHlAv+o4EbLIRqXFc3vF5rs3Fz+cgqZ3HVGm90TFFcbPbx/eKcvzyHdYt8P5pi364mijt9NKtNV9F9VdPz+Gp/rxlw0i/IWxV0/vBrW10HPd42krsOgHibxBYg8CAwEAATANBgkqhkiG9w0BAQsFAAOCAQEArpYzZEoYcRo3YF7Ny4gdc8ODSlPPKIdLvwhUTGbPdzJU2ifxzE/KeTHGmFpjpakjDmmWsr2j9FGU/9U0SjqPmJHP5gYbjmz+tD3jeaEkIBDZpcYc+MveQaA7uDMILA2OUhHuFu0UJVjGxl2EIpxivC+IJ0RpBS5AERT6V91Fqv2Ylwb5sklhoXGDx9s+l+Ud1MLaewIvnUHdIRtC02bvlhjwt0pnICDtHMikvOiTXjTBJgl7X9Q51Gm636q9pJVjS1T0gR3cNt9JJE/foDdOK8JozRFtF4j14xegXLt7BVBIXuSOK6P1c09mCPQ1VJbcj01S1zfrvZ+RZvrxr/0aXQ==)
      iex> {:ok, cert} = cert_der |> Base.decode64!() |> X509.Certificate.from_der()
      iex> public_key = X509.Certificate.public_key(cert)
      iex> saml_response = ""
      iex> {:ok, saml_body} = saml_response |> Base.decode64()
      iex> {:ok, root} = SimpleXml.parse(saml_body)
      iex> SimpleXml.verify(root, public_key)
      :ok

  ### Verification fails if the digest doesn't match the expected value

      iex> cert_der = ~S(MIIDqDCCApCgAwIBAgIGAYj8lAYkMA0GCSqGSIb3DQEBCwUAMIGUMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNU2FuIEZyYW5jaXNjbzENMAsGA1UECgwET2t0YTEUMBIGA1UECwwLU1NPUHJvdmlkZXIxFTATBgNVBAMMDGRldi00NTM0OTkwNjEcMBoGCSqGSIb3DQEJARYNaW5mb0Bva3RhLmNvbTAeFw0yMzA2MjcxMTE3NTlaFw0zMzA2MjcxMTE4NTlaMIGUMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNU2FuIEZyYW5jaXNjbzENMAsGA1UECgwET2t0YTEUMBIGA1UECwwLU1NPUHJvdmlkZXIxFTATBgNVBAMMDGRldi00NTM0OTkwNjEcMBoGCSqGSIb3DQEJARYNaW5mb0Bva3RhLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALTE7IRG+oQZBASQ7DY3yeTrwABdI2BgG2FXKSkTPk9enMwtyUyDXCOteOg18+//MA2UTvgSI+n0fiAh7Bi7cxpimnOaj/kcgvpdn+5wpEfSIDKAeEg9VIQf0fz/ks4XkrNxRh8ba6Z/ypOVR2TLozu8v6sjGCiqHSoiPl78KINHx9jMB3QGdTHRxsTzwFPGcUEvO7XvjxxMN9FLZdHkwtA6cZXDbHlAv+o4EbLIRqXFc3vF5rs3Fz+cgqZ3HVGm90TFFcbPbx/eKcvzyHdYt8P5pi364mijt9NKtNV9F9VdPz+Gp/rxlw0i/IWxV0/vBrW10HPd42krsOgHibxBYg8CAwEAATANBgkqhkiG9w0BAQsFAAOCAQEArpYzZEoYcRo3YF7Ny4gdc8ODSlPPKIdLvwhUTGbPdzJU2ifxzE/KeTHGmFpjpakjDmmWsr2j9FGU/9U0SjqPmJHP5gYbjmz+tD3jeaEkIBDZpcYc+MveQaA7uDMILA2OUhHuFu0UJVjGxl2EIpxivC+IJ0RpBS5AERT6V91Fqv2Ylwb5sklhoXGDx9s+l+Ud1MLaewIvnUHdIRtC02bvlhjwt0pnICDtHMikvOiTXjTBJgl7X9Q51Gm636q9pJVjS1T0gR3cNt9JJE/foDdOK8JozRFtF4j14xegXLt7BVBIXuSOK6P1c09mCPQ1VJbcj01S1zfrvZ+RZvrxr/0aXQ==)
      iex> {:ok, cert} = cert_der |> Base.decode64!() |> X509.Certificate.from_der()
      iex> public_key = X509.Certificate.public_key(cert)
      iex> saml_response = ""
      iex> {:ok, saml_body} = saml_response |> Base.decode64()
      iex> {:ok, root} = SimpleXml.parse(saml_body)
      iex> SimpleXml.verify(root, public_key)
      {:error, :digest_verification_failed}

  ### Verification fails if the digest doesn't match the expected value

      iex> cert_der = ~S(MIIDqDCCApCgAwIBAgIGAYj8lAYkMA0GCSqGSIb3DQEBCwUAMIGUMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNU2FuIEZyYW5jaXNjbzENMAsGA1UECgwET2t0YTEUMBIGA1UECwwLU1NPUHJvdmlkZXIxFTATBgNVBAMMDGRldi00NTM0OTkwNjEcMBoGCSqGSIb3DQEJARYNaW5mb0Bva3RhLmNvbTAeFw0yMzA2MjcxMTE3NTlaFw0zMzA2MjcxMTE4NTlaMIGUMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNU2FuIEZyYW5jaXNjbzENMAsGA1UECgwET2t0YTEUMBIGA1UECwwLU1NPUHJvdmlkZXIxFTATBgNVBAMMDGRldi00NTM0OTkwNjEcMBoGCSqGSIb3DQEJARYNaW5mb0Bva3RhLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALTE7IRG+oQZBASQ7DY3yeTrwABdI2BgG2FXKSkTPk9enMwtyUyDXCOteOg18+//MA2UTvgSI+n0fiAh7Bi7cxpimnOaj/kcgvpdn+5wpEfSIDKAeEg9VIQf0fz/ks4XkrNxRh8ba6Z/ypOVR2TLozu8v6sjGCiqHSoiPl78KINHx9jMB3QGdTHRxsTzwFPGcUEvO7XvjxxMN9FLZdHkwtA6cZXDbHlAv+o4EbLIRqXFc3vF5rs3Fz+cgqZ3HVGm90TFFcbPbx/eKcvzyHdYt8P5pi364mijt9NKtNV9F9VdPz+Gp/rxlw0i/IWxV0/vBrW10HPd42krsOgHibxBYg8CAwEAATANBgkqhkiG9w0BAQsFAAOCAQEArpYzZEoYcRo3YF7Ny4gdc8ODSlPPKIdLvwhUTGbPdzJU2ifxzE/KeTHGmFpjpakjDmmWsr2j9FGU/9U0SjqPmJHP5gYbjmz+tD3jeaEkIBDZpcYc+MveQaA7uDMILA2OUhHuFu0UJVjGxl2EIpxivC+IJ0RpBS5AERT6V91Fqv2Ylwb5sklhoXGDx9s+l+Ud1MLaewIvnUHdIRtC02bvlhjwt0pnICDtHMikvOiTXjTBJgl7X9Q51Gm636q9pJVjS1T0gR3cNt9JJE/foDdOK8JozRFtF4j14xegXLt7BVBIXuSOK6P1c09mCPQ1VJbcj01S1zfrvZ+RZvrxr/0aXQ==)
      iex> {:ok, cert} = cert_der |> Base.decode64!() |> X509.Certificate.from_der()
      iex> public_key = X509.Certificate.public_key(cert)
      iex> saml_response = ""
      iex> {:ok, saml_body} = saml_response |> Base.decode64()
      iex> {:ok, root} = SimpleXml.parse(saml_body)
      iex> SimpleXml.verify(root, public_key)
      {:error, :signature_verification_failed}
  """
  @spec verify(xml_node(), public_key()) :: :ok | {:error, any()}
  def verify(node, public_key) when is_tuple(node) do
    with {:ok, node_id} <- XmlNode.attribute(node, "ID"),
         {:ok, signature_node} <- XmlNode.first_child(node, ~r/.*:?Signature$/i),
         {:ok, signed_info_node} <- canonicalized_signed_info(signature_node),
         signed_info_xml <- XmlNode.to_string(signed_info_node),
         {:ok, reference_node} <- XmlNode.first_child(signed_info_node, ~r/.*:?Reference$/i),
         {:ok, reference_uri} <- XmlNode.attribute(reference_node, "URI"),
         :ok <- verify_signature_reference_uri(node_id, reference_uri),
         {:ok, digest_value_node} <- XmlNode.first_child(reference_node, ~r/.*:?DigestValue$/i),
         {:ok, digest_value} <- XmlNode.text(digest_value_node),
         node <- node |> remove_enveloped_signature() |> XmlNode.canonicalize(),
         computed_digest <- sha256_digest(node),
         :ok <- verify_digest(digest_value, computed_digest),
         {:ok, sig_value_node} <- XmlNode.first_child(signature_node, ~r/.*:?SignatureValue$/i),
         {:ok, signature_value} <- XmlNode.text(sig_value_node),
         {:ok, decoded_signature_value} <- Base.decode64(signature_value) do
      case :public_key.verify(signed_info_xml, :sha256, decoded_signature_value, public_key) do
        true -> :ok
        _ -> {:error, :signature_verification_failed}
      end
    else
      {:error, reason} ->
        {:error, reason}

      err ->
        Logger.error("Verification failed: #{inspect(err)}")
        {:error, :verification_failed}
    end
  end

  @spec remove_enveloped_signature(xml_node()) :: xml_node()
  defp remove_enveloped_signature(node) when is_tuple(node),
    do: node |> XmlNode.drop_children("*:Signature")

  @spec sha256_digest(xml_node()) :: String.t()
  defp sha256_digest(node) when is_tuple(node) do
    node
    |> XmlNode.to_string()
    |> then(&:crypto.hash(:sha256, &1))
    |> Base.encode64()
  end

  @spec verify_signature_reference_uri(String.t(), String.t()) :: :ok | {:error, any()}
  defp verify_signature_reference_uri(node_id, "#" <> node_id) when is_binary(node_id), do: :ok

  defp verify_signature_reference_uri(_node_id, _reference_uri),
    do: {:error, :invalid_signature_reference_uri}

  @spec verify_digest(String.t(), String.t()) :: :ok | {:error, any()}
  defp verify_digest(digest_value, digest_value) when is_binary(digest_value), do: :ok

  defp verify_digest(_digest_value, _computed_digest_value),
    do: {:error, :digest_verification_failed}

  @spec canonicalized_signed_info(xml_node()) :: {:ok, xml_node()} | {:error, any()}
  defp canonicalized_signed_info(signature_node) when is_tuple(signature_node) do
    with {:ok, namespace_attr} <- XmlNode.namespace_attribute(signature_node),
         {:ok, {tag, attrs, children}} <-
           XmlNode.first_child(signature_node, ~r/.*:?SignedInfo$/i),
         signed_info_node <- {tag, [namespace_attr | attrs], children} |> XmlNode.canonicalize() do
      {:ok, signed_info_node}
    else
      {:error, reason} -> {:error, reason}
    end
  end
end
